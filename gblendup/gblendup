#!/usr/bin/env bash
set -eo pipefail

# gblendup - installer for gblend with binary download support
print_banner() {
  echo "
  ██████╗ ██████╗ ██╗     ███████╗███╗   ██╗██████╗
  ██╔════╝ ██╔══██╗██║     ██╔════╝████╗  ██║██╔══██╗
  ██║  ███╗██████╔╝██║     █████╗  ██╔██╗ ██║██║  ██║
  ██║   ██║██╔══██╗██║     ██╔══╝  ██║╚██╗██║██║  ██║
  ╚██████╔╝██████╔╝███████╗███████╗██║ ╚████║██████╔╝
   ╚═════╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═══╝╚═════╝

  Installing gblend...
"
}

print_banner

# Configuration
REPO_URL="https://github.com/fluentlabs-xyz/gblend"
REPO_GIT_URL="https://github.com/fluentlabs-xyz/gblend.git"
BRANCH_NAME="gblend"
BASE_DIR="${XDG_CONFIG_HOME:-$HOME}"
GBLEND_DIR="${GBLEND_DIR:-"$BASE_DIR/.gblend"}"
GBLEND_BIN_DIR="$GBLEND_DIR/bin"
GBLEND_SOURCE_DIR="$GBLEND_DIR/source"

# Parse command line arguments
FORCE_BUILD_FROM_SOURCE=false
INSTALL_VERSION="latest"

while [[ $# -gt 0 ]]; do
  case $1 in
    --build-from-source)
      FORCE_BUILD_FROM_SOURCE=true
      shift
      ;;
    --version)
      INSTALL_VERSION="$2"
      shift 2
      ;;
    --help|-h)
      echo "Usage: gblendup [OPTIONS]"
      echo ""
      echo "Options:"
      echo "  --build-from-source    Force building from source instead of downloading binary"
      echo "  --version VERSION      Install specific version (default: latest)"
      echo "  --help, -h            Show this help message"
      echo ""
      echo "Examples:"
      echo "  gblendup                          # Install latest precompiled binary"
      echo "  gblendup --version v1.0.0         # Install specific version"
      echo "  gblendup --build-from-source      # Force build from source"
      exit 0
      ;;
    *)
      echo "Unknown option: $1"
      echo "Use --help for usage information"
      exit 1
      ;;
  esac
done

# Utility functions
check_cmd() {
  command -v "$1" &>/dev/null
}

need_cmd() {
  if ! check_cmd "$1"; then
    echo "Error: '$1' is required but not installed." >&2
    exit 1
  fi
}

ensure() {
  if ! "$@"; then
    echo "Error: Command failed: $*" >&2
    exit 1
  fi
}

# Platform detection
detect_platform() {
    local os arch
    os=$(uname -s | tr '[:upper:]' '[:lower:]')
    arch=$(uname -m)

    case $os in
        linux) PLATFORM="linux" ;;
        darwin) PLATFORM="darwin" ;;
        mingw*|msys*|cygwin*) PLATFORM="win32" ;;
        *)
            echo "⚠️  Unsupported OS: $os"
            return 1
            ;;
    esac

    case $arch in
        x86_64|amd64) ARCH="amd64" ;;
        aarch64|arm64) ARCH="arm64" ;;
        *)
            echo "⚠️  Unsupported architecture: $arch"
            return 1
            ;;
    esac

    if [[ "$PLATFORM" == "win32" ]]; then
        BINARY_EXT=".exe"
        ARCHIVE_EXT=".zip"
    else
        BINARY_EXT=""
        ARCHIVE_EXT=".tar.gz"
    fi

    ARCHIVE_NAME="gblend-${PLATFORM}-${ARCH}${ARCHIVE_EXT}"
    DOWNLOAD_URL="${REPO_URL}/releases/download/${INSTALL_VERSION}/${ARCHIVE_NAME}"

    return 0
}

# Try to download precompiled binary
try_download_binary() {
    if [[ "$FORCE_BUILD_FROM_SOURCE" == "true" ]]; then
        echo "Skipping binary download (--build-from-source flag used)"
        return 1
    fi

    echo "Attempting to download precompiled binary..."

    if ! detect_platform; then
        echo "Platform detection failed, will build from source"
        return 1
    fi

    echo "Detected platform: $PLATFORM-$ARCH"
    echo "Download URL: $DOWNLOAD_URL"

    # Check if curl is available
    if ! check_cmd curl; then
        echo "⚠️  curl not found, cannot download binary"
        return 1
    fi

    local tmp_dir
    tmp_dir=$(mktemp -d)
    local archive_path="$tmp_dir/$ARCHIVE_NAME"

    # Try to download with progress bar
    echo "Downloading gblend $INSTALL_VERSION for $PLATFORM-$ARCH..."
    if curl -fL --progress-bar "$DOWNLOAD_URL" -o "$archive_path"; then
        echo "✓ Downloaded binary archive"

        # Extract based on platform
        echo "Extracting binary..."
        ensure mkdir -p "$GBLEND_BIN_DIR"

        if [[ "$PLATFORM" == "win32" ]]; then
            if check_cmd unzip; then
                ensure unzip -j "$archive_path" -d "$GBLEND_BIN_DIR"
            else
                echo "⚠️  unzip not found, cannot extract Windows archive"
                rm -rf "$tmp_dir"
                return 1
            fi
        else
            ensure tar -xzf "$archive_path" -C "$GBLEND_BIN_DIR"
        fi

        ensure chmod +x "$GBLEND_BIN_DIR/gblend$BINARY_EXT"

        # Verify binary works
        echo "Verifying binary..."
        if "$GBLEND_BIN_DIR/gblend$BINARY_EXT" --version >/dev/null 2>&1; then
            echo "✓ Binary installation successful"

            # Show version
            echo "Installed version:"
            "$GBLEND_BIN_DIR/gblend$BINARY_EXT" --version

            rm -rf "$tmp_dir"
            return 0
        else
            echo "⚠️  Downloaded binary doesn't work on this system"
            rm -f "$GBLEND_BIN_DIR/gblend$BINARY_EXT"
            rm -rf "$tmp_dir"
            return 1
        fi
    else
        local http_code
        http_code=$(curl -s -o /dev/null -w "%{http_code}" "$DOWNLOAD_URL" || echo "000")

        if [[ "$http_code" == "404" ]]; then
            echo "⚠️  No precompiled binary available for $PLATFORM-$ARCH (version: $INSTALL_VERSION)"
            echo "    This is normal for new releases or unsupported platforms"
        else
            echo "⚠️  Failed to download binary (HTTP $http_code)"
        fi

        rm -rf "$tmp_dir"
        return 1
    fi
}

# Build from source (fallback)
build_from_source() {
    echo ""
    echo "Building gblend from source..."

    # Check build dependencies
    need_cmd git
    need_cmd cargo

    echo "✓ Build dependencies available"

    # Create directories
    echo "Setting up build directories..."
    ensure mkdir -p "$GBLEND_BIN_DIR"
    ensure mkdir -p "$GBLEND_SOURCE_DIR"

    # Clone or update repository
    if [[ -d "$GBLEND_SOURCE_DIR/.git" ]]; then
        echo "Updating existing repository..."
        cd "$GBLEND_SOURCE_DIR"
        ensure git fetch origin
        ensure git checkout "$BRANCH_NAME"
        ensure git pull origin "$BRANCH_NAME"
    else
        echo "Cloning repository..."
        ensure git clone --branch "$BRANCH_NAME" --single-branch "$REPO_GIT_URL" "$GBLEND_SOURCE_DIR"
        cd "$GBLEND_SOURCE_DIR"
    fi

    echo "✓ Repository ready (branch: $BRANCH_NAME)"

    # Build
    echo "Building gblend (this may take several minutes)..."
    export RUSTFLAGS="${RUSTFLAGS:--C target-cpu=native}"
    ensure cargo build --release --bin gblend

    # Check if binary was built
    if [[ ! -f "target/release/gblend$BINARY_EXT" ]]; then
        echo "Error: gblend binary not found after build" >&2
        exit 1
    fi

    echo "✓ Build completed successfully"

    # Install
    echo "Installing gblend binary..."
    ensure cp "target/release/gblend$BINARY_EXT" "$GBLEND_BIN_DIR/gblend$BINARY_EXT"
    ensure chmod +x "$GBLEND_BIN_DIR/gblend$BINARY_EXT"

    # Show version
    echo "Built version:"
    "$GBLEND_BIN_DIR/gblend$BINARY_EXT" --version
}

# Add to PATH functionality
detect_shell_and_add_to_path() {
    case $SHELL in
        */zsh)
            PROFILE="${ZDOTDIR-"$HOME"}/.zshenv"
            SHELL_NAME="zsh"
        ;;
        */bash)
            PROFILE="$HOME/.bashrc"
            SHELL_NAME="bash"
        ;;
        */fish)
            PROFILE="$HOME/.config/fish/config.fish"
            SHELL_NAME="fish"
        ;;
        *)
            echo "⚠️  Could not detect shell. Please manually add $GBLEND_BIN_DIR to your PATH."
            return 1
        ;;
    esac

    # Check if already in PATH
    if [[ ":$PATH:" == *":${GBLEND_BIN_DIR}:"* ]]; then
        echo "✓ gblend is already in PATH"
        return 0
    fi

    # Add to PATH
    echo "Adding gblend to PATH in $PROFILE..."

    if [[ "$SHELL_NAME" == "fish" ]]; then
        echo "" >> "$PROFILE"
        echo "# gblend" >> "$PROFILE"
        echo "fish_add_path -a $GBLEND_BIN_DIR" >> "$PROFILE"
    else
        echo "" >> "$PROFILE"
        echo "# gblend" >> "$PROFILE"
        echo "export PATH=\"\$PATH:$GBLEND_BIN_DIR\"" >> "$PROFILE"
    fi

    echo "✓ Added gblend to PATH in $PROFILE"
    return 0
}

print_success_message() {
    echo "
  🎉 gblend installation completed successfully!
"

    echo "Installation method: $INSTALL_METHOD"
    echo "Version: $INSTALL_VERSION"
    echo ""
    echo "Repository: https://github.com/fluentlabs-xyz/gblend (gblend branch)"
    echo "Binary location: $GBLEND_BIN_DIR/gblend$BINARY_EXT"
    if [[ "$INSTALL_METHOD" == "source build" ]]; then
        echo "Source location: $GBLEND_SOURCE_DIR"
    fi
    echo ""

    if [[ "$ADDED_TO_PATH" == "true" ]]; then
        echo "Next steps:"
        echo "  1. Restart your terminal or run: source $PROFILE"
        echo "  2. Test with: gblend --version"
        echo ""
        echo "You can also run it directly: $GBLEND_BIN_DIR/gblend$BINARY_EXT"
    else
        echo "To use gblend:"
        echo "  1. Run directly: $GBLEND_BIN_DIR/gblend$BINARY_EXT"
        echo "  2. Or add to PATH: export PATH=\"\$PATH:$GBLEND_BIN_DIR\""
    fi

    echo ""
    echo "To update gblend, run this installer again!"
    echo "Use 'gblendup --help' to see all available options."
}

# Main installation logic
main() {
    # Basic dependency check
    need_cmd curl

    echo "✓ Basic dependencies available"

    # Detect platform for binary name
    detect_platform >/dev/null 2>&1 || true

    # Try binary download first, fallback to source build
    if try_download_binary; then
        INSTALL_METHOD="precompiled binary"
    else
        echo ""
        echo "Falling back to building from source..."
        build_from_source
        INSTALL_METHOD="source build"
    fi

    # Add to PATH
    if detect_shell_and_add_to_path; then
        ADDED_TO_PATH=true
    else
        ADDED_TO_PATH=false
    fi

    # Success message
    print_success_message
}

# Run main function
main "$@