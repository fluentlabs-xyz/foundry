name: gblend-release

on:
  push:
    tags:
      - "v*.*.*" # Version releases (v1.0.0, v2.1.3, etc.)
      - "latest" # Latest release
  workflow_dispatch: # Manual trigger

env:
  CARGO_TERM_COLOR: always
  IS_NIGHTLY: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
  PROFILE: maxperf
  STABLE_VERSION: "v0.1.0"

jobs:
  prepare:
    name: Prepare release
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
      changelog: ${{ steps.build_changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute release name and tag
        id: release_info
        run: |
          if [[ ${IS_NIGHTLY} == 'true' ]]; then
            echo "tag_name=nightly-${GITHUB_SHA}" >> $GITHUB_OUTPUT
            echo "release_name=Nightly ($(date '+%Y-%m-%d'))" >> $GITHUB_OUTPUT
          else
            echo "tag_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
            echo "release_name=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          fi

      # Creates a `nightly-SHA` tag for this specific nightly
      # This tag is used for this specific nightly version's release
      # which allows users to roll back. It is also used to build
      # the changelog.
      - name: Create build-specific nightly tag
        if: ${{ env.IS_NIGHTLY == 'true' }}
        uses: actions/github-script@v7
        env:
          TAG_NAME: ${{ steps.release_info.outputs.tag_name }}
        with:
          script: |
            const createTag = require('./.github/scripts/create-tag.js')
            await createTag({ github, context }, process.env.TAG_NAME)

  release:
    permissions:
      id-token: write
      contents: write
      attestations: write
    name: ${{ matrix.target }} (${{ matrix.runner }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 240
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          # `runner`: GHA runner label
          # `target`: Rust build target triple
          # `platform` and `arch`: Used in tarball names
          # `svm`: target platform to use for the Solc binary: https://github.com/roynalnaruto/svm-rs/blob/84cbe0ac705becabdc13168bae28a45ad2299749/svm-builds/build.rs#L4-L24
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            svm_target_platform: linux-amd64
            platform: linux
            arch: amd64
          - runner: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            svm_target_platform: linux-amd64
            platform: alpine
            arch: amd64
          - runner: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            svm_target_platform: linux-aarch64
            platform: linux
            arch: arm64
          - runner: ubuntu-22.04
            target: aarch64-unknown-linux-musl
            svm_target_platform: linux-aarch64
            platform: alpine
            arch: arm64
          # This is pinned to `macos-13-large` to support old SDK versions.
          # If the runner is deprecated it should be pinned to the oldest available version of the runner.
          - runner: macos-13-large
            target: x86_64-apple-darwin
            svm_target_platform: macosx-amd64
            platform: darwin
            arch: amd64
          - runner: macos-latest
            target: aarch64-apple-darwin
            svm_target_platform: macosx-aarch64
            platform: darwin
            arch: arm64
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            svm_target_platform: windows-amd64
            platform: win32
            arch: amd64
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true

      - name: Apple M1 setup
        if: matrix.target == 'aarch64-apple-darwin'
        run: |
          echo "SDKROOT=$(xcrun -sdk macosx --show-sdk-path)" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx --show-sdk-platform-version)" >> $GITHUB_ENV

      - name: cross setup
        if: matrix.target == 'x86_64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-musl' || matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          cargo install cross

      - name: Build binaries
        env:
          TAG_NAME: ${{ (env.IS_NIGHTLY == 'true' && 'nightly') || needs.prepare.outputs.tag_name }}
          SVM_TARGET_PLATFORM: ${{ matrix.svm_target_platform }}
          PLATFORM_NAME: ${{ matrix.platform }}
          TARGET: ${{ matrix.target }}
          OUT_DIR: target/${{ matrix.target }}/${{ env.PROFILE }}
        shell: bash
        run: |
          set -eo pipefail
          flags=(--target $TARGET --profile $PROFILE --bins
            --no-default-features --features aws-kms,gcp-kms,cli,asm-keccak)

          # `jemalloc` is not fully supported on MSVC or aarch64 Linux.
          if [[ "$TARGET" != *msvc* && "$TARGET" != "aarch64-unknown-linux-gnu" ]]; then
            flags+=(--features jemalloc)
          fi

          [[ "$TARGET" == *windows* ]] && ext=".exe"

          if [[ "$TARGET" == *-musl || "$TARGET" == "aarch64-unknown-linux-gnu" ]]; then
            cross build "${flags[@]}"
          else
            cargo build "${flags[@]}"
          fi

          bins=(gblend)
          for name in "${bins[@]}"; do
            bin=$OUT_DIR/$name$ext
            echo ""
            file "$bin" || true
            du -h "$bin" || true
            ldd "$bin" || true
            $bin --version || true
            echo "${name}_bin_path=${bin}" >> $GITHUB_ENV
          done

      - name: Archive binaries
        id: artifacts
        env:
          PLATFORM_NAME: ${{ matrix.platform }}
          OUT_DIR: target/${{ matrix.target }}/${{ env.PROFILE }}
          VERSION_NAME: ${{ (env.IS_NIGHTLY == 'true' && 'nightly') || needs.prepare.outputs.tag_name }}
          ARCH: ${{ matrix.arch }}
        shell: bash
        run: |
          if [[ "$PLATFORM_NAME" == "linux" || "$PLATFORM_NAME" == "alpine" ]]; then
            tar -czvf "gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C $OUT_DIR gblend
            echo "file_name=gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          elif [ "$PLATFORM_NAME" == "darwin" ]; then
            # We need to use gtar here otherwise the archive is corrupt.
            # See: https://github.com/actions/virtual-environments/issues/2619
            gtar -czvf "gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" -C $OUT_DIR gblend
            echo "file_name=gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          else
            cd $OUT_DIR
            7z a -tzip "gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" forge.exe cast.exe anvil.exe chisel.exe
            mv "gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" ../../../
            echo "file_name=gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.zip" >> $GITHUB_OUTPUT
          fi
          echo "gblend_attestation=gblend_${VERSION_NAME}_${PLATFORM_NAME}_${ARCH}.attestation.txt" >> $GITHUB_OUTPUT

      - name: Build man page
        id: man
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        env:
          OUT_DIR: target/${{ matrix.target }}/${{ env.PROFILE }}
          VERSION_NAME: ${{ (env.IS_NIGHTLY == 'true' && 'nightly') || needs.prepare.outputs.tag_name }}
        shell: bash
        run: |
          sudo apt-get -y install help2man
          help2man -N $OUT_DIR/gblend > gblend.1
          gzip gblend.1
          tar -czvf "gblend_man_${VERSION_NAME}.tar.gz" gblend.1.gz
          echo "gblend_man=gblend_man_${VERSION_NAME}.tar.gz" >> $GITHUB_OUTPUT

      # - name: Binaries attestation
      #   id: attestation
      #   uses: actions/attest-build-provenance@v2
      #   with:
      #     subject-path: |
      #       ${{ env.gblend_bin_path }}

      # - name: Record attestation URL
      #   run: |
      #     echo "${{ steps.attestation.outputs.attestation-url }}" > ${{ steps.artifacts.outputs.gblend_attestation }}

      # Creates the release for this specific version
      - name: Create release
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: ${{ needs.prepare.outputs.release_name }}
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          prerelease: ${{ env.IS_NIGHTLY == 'true' }}
          body: ${{ needs.prepare.outputs.changelog }}
          files: |
            ${{ steps.artifacts.outputs.file_name }}
            ${{ steps.artifacts.outputs.gblend_attestation }}
            ${{ steps.man.outputs.gblend_man }}

      # # If this is a nightly release, it also updates the release
      # # tagged `nightly` for compatibility with `gblendup`
      # - name: Update nightly release
      #   if: ${{ env.IS_NIGHTLY == 'true' }}
      #   uses: softprops/action-gh-release@v2.2.2
      #   with:
      #     name: "Nightly"
      #     tag_name: "nightly"
      #     prerelease: true
      #     body: ${{ needs.prepare.outputs.changelog }}
      #     files: |
      #       ${{ steps.artifacts.outputs.file_name }}
      #       ${{ steps.artifacts.outputs.gblend_attestation }}
      #       ${{ steps.man.outputs.gblend_man }}

  cleanup:
    name: Release cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: release
    if: always()
    steps:
      - uses: actions/checkout@v4

      # Moves the `nightly` tag to `HEAD`
      - name: Move nightly tag
        if: ${{ env.IS_NIGHTLY == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const moveTag = require('./.github/scripts/move-tag.js')
            await moveTag({ github, context }, 'nightly')

      - name: Delete old nightlies
        uses: actions/github-script@v7
        with:
          script: |
            const prunePrereleases = require('./.github/scripts/prune-prereleases.js')
            await prunePrereleases({github, context})
