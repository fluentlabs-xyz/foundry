name: gblend-release

on:
  push:
    tags:
      - "v*.*.*"        # Version releases (v1.0.0, v2.1.3, etc.)
      - "latest"        # Latest release
  workflow_dispatch:    # Manual trigger

env:
  CARGO_TERM_COLOR: always
  PROFILE: release

jobs:
  prepare:
    name: Prepare gblend release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      tag_name: ${{ steps.release_info.outputs.tag_name }}
      release_name: ${{ steps.release_info.outputs.release_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: gblend  # Always use gblend branch regardless of tag source

      - name: Compute release name and tag
        id: release_info
        run: |
          TAG_NAME="${GITHUB_REF_NAME}"
          
          if [[ "$TAG_NAME" == "latest" ]]; then
            echo "tag_name=latest" >> $GITHUB_OUTPUT
            echo "release_name=gblend latest ($(date '+%Y-%m-%d %H:%M'))" >> $GITHUB_OUTPUT
          else
            # Version tags (v1.0.0, v2.1.3, etc.) - these are gblend versions
            echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "release_name=gblend ${TAG_NAME}" >> $GITHUB_OUTPUT
          fi

  build-gblend:
    permissions:
      contents: write
      attestations: write
    name: Build gblend (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: amd64
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: arm64
          - runner: macos-latest
            target: x86_64-apple-darwin
            platform: darwin
            arch: amd64
          - runner: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm64
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32
            arch: amd64

    steps:
      - uses: actions/checkout@v4
        with:
          ref: gblend  # Always build from gblend branch

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}
          cache-on-failure: true

      - name: Install cross for ARM builds
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross

      - name: Build gblend
        env:
          TARGET: ${{ matrix.target }}
        run: |
          if [[ "$TARGET" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --target $TARGET --profile $PROFILE --bin gblend
          else
            cargo build --target $TARGET --profile $PROFILE --bin gblend
          fi

      - name: Prepare binary
        id: binary
        env:
          TARGET: ${{ matrix.target }}
          PLATFORM: ${{ matrix.platform }}
          ARCH: ${{ matrix.arch }}
        run: |
          if [[ "${{ matrix.platform }}" == "win32" ]]; then
            BINARY_NAME="gblend.exe"
            ARCHIVE_NAME="gblend-$PLATFORM-$ARCH.zip"
          else
            BINARY_NAME="gblend"
            ARCHIVE_NAME="gblend-$PLATFORM-$ARCH.tar.gz"
          fi
          
          BINARY_PATH="target/$TARGET/$PROFILE/$BINARY_NAME"
          
          echo "binary_path=$BINARY_PATH" >> $GITHUB_OUTPUT
          echo "binary_name=$BINARY_NAME" >> $GITHUB_OUTPUT
          echo "archive_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT
          
          # Verify binary was built
          ls -la "$BINARY_PATH"
          file "$BINARY_PATH" || true
          
          # Test binary if possible
          if [[ "${{ matrix.platform }}" != "win32" ]] || [[ "${{ runner.os }}" == "Windows" ]]; then
            "$BINARY_PATH" --version || echo "Could not get version"
          fi

      - name: Create archive
        env:
          BINARY_PATH: ${{ steps.binary.outputs.binary_path }}
          BINARY_NAME: ${{ steps.binary.outputs.binary_name }}
          ARCHIVE_NAME: ${{ steps.binary.outputs.archive_name }}
          PLATFORM: ${{ matrix.platform }}
        run: |
          if [[ "$PLATFORM" == "win32" ]]; then
            7z a "$ARCHIVE_NAME" "$BINARY_PATH"
          else
            tar -czf "$ARCHIVE_NAME" -C "$(dirname "$BINARY_PATH")" "$BINARY_NAME"
          fi
          
          echo "Created archive: $ARCHIVE_NAME"
          ls -la "$ARCHIVE_NAME"

      - name: Generate attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: ${{ steps.binary.outputs.binary_path }}

      - name: Upload to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag_name }}
          name: ${{ needs.prepare.outputs.release_name }}
          body: |
            
            ██████╗ ██████╗ ██╗     ███████╗███╗   ██╗██████╗
            ██╔════╝ ██╔══██╗██║     ██╔════╝████╗  ██║██╔══██╗
            ██║  ███╗██████╔╝██║     █████╗  ██╔██╗ ██║██║  ██║
            ██║   ██║██╔══██╗██║     ██╔══╝  ██║╚██╗██║██║  ██║
            ╚██████╔╝██████╔╝███████╗███████╗██║ ╚████║██████╔╝
             ╚═════╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═══╝╚═════╝
            
            **gblend** - enhanced forge for extended functionality
            
            Built from gblend branch at commit: ${{ github.sha }}
            
            ## Installation
            
            ```bash
            # Quick install (recommended)
            curl -sSL https://raw.githubusercontent.com/fluentlabs-xyz/gblend/gblend/install-gblend.sh | bash
            
            # Or download binary directly for your platform
            ```
            
            ## Usage
            
            ```bash
            gblend --version
            gblend --help
            ```
            
            ## Available binaries
            - `gblend-linux-amd64.tar.gz` - Linux x86_64
            - `gblend-linux-arm64.tar.gz` - Linux ARM64
            - `gblend-darwin-amd64.tar.gz` - macOS Intel
            - `gblend-darwin-arm64.tar.gz` - macOS Apple Silicon
            - `gblend-win32-amd64.zip` - Windows x64
          files: |
            ${{ steps.binary.outputs.archive_name }}
          prerelease: ${{ needs.prepare.outputs.tag_name == 'latest' }}

  # Notify on failure
  notify-failure:
    name: Notify on failure
    runs-on: ubuntu-latest
    needs: [ prepare, build-gblend ]
    if: failure()
    steps:
      - name: Create issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🚨 gblend Release Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## gblend Release Failure
            
            **Workflow:** ${context.workflow}
            **Run:** ${context.runId}
            **Commit:** ${context.sha}
            **Tag:** ${context.ref}
            
            The gblend release workflow failed. Please check the logs:
            ${context.payload.repository.html_url}/actions/runs/${context.runId}
            
            This issue was automatically created by the failed workflow.
            `;
            
            // Check if there's already an open issue for CI failures
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure,gblend-release'
            });
            
            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'gblend-release']
              });
            }